==> 1. У сайта будет несколько страниц, а именно:
/ - основная страница
/signup - страница регистрации пользователя
/login - страница для захода в аккаунт
/dashboard - страница для просмотра статистики пользователя


==> 2. Базы данных
Будет несколько баз данных хранящих определенную информацию

1. База пользователей, в ней содержится информация:
	- Дата регистрации
	- Имя пользователя [char(16)]
	- Уникальный идентификатор пользователя [char(32)]
	- Зашифрованный пароль [char(32)]
	- Заработанные деньги

2. База покупателей, в ней содержиться информация о покупках пользователей:
	- Дата покупки
	- Уникальный идентификатор пользователя [int]
	- Покупка, которая была произведена [enum(NitroFull, NitroBasic, NitroFullYear, NitroFullGift, Boost, BoostFull, DevBadge)]
	- Откуда: ТГ, сайт или дискорд [enum(TG, WEB, DC)]
	- Сумма (Рубли) [int]

3. База данных действий:
	- Имя действия (char(20))
	- Количество совершенных действий

4. База данных посетителей:
	- Дата первого захода
	- Уникальный идентификатор пользователя [char(32)]
	- Количество посещений
	- Кто привлёк, ник, человека который привлёк [char(16)]

==> 3. Роуты для бекенда и данные:
	- "/signup": с frontend отправляются данные:
		{
		  unique_id: 334983,
		  username: "username",
		  password: "password"
		}
		Эти данные сохраняются в базу данных 1. Пароль должен быть зашифрован.
		В ответ отправляется либо ошибка в виде:
		{error: "Error Happened"}, либо {success: true}

	- "/buy": c frontend отправляются данные:
		{
		  uuid: "6b40b54f-c9e8-48b6-b7ff-086aa5513614",
		  good: "NitroFull",
		  sumRub: 190,
		  from: "WEB"
		}
		Эти данные сохраняются в базу данных 2.
		В ответ отправляется либо ошибка в виде:
		{error: "Error Happened"}, либо {success: true}

	- "/action": с frontend отправляются данные:
		{
		  name: "ReviewSent",
		  value: 1
		}
		Эти данные сохраняются в базу данных 3. Если строчка с таким именем уже есть, то value просто добавляется в уже существующее значение.
		В ответ отправляется либо ошибка в виде:
		{error: "Error Happened"}, либо {success: true}

	- "/visitor": с frontend отправляются либо:
		{
		  ref: "FLEY", (могут быть пустыми)
		  new: true
		} (в таком случае ответом будет): {uuid: <новый uuid>}, id будет генерироваться последовательно, то есть 1 пользователь имеет unique_id: 1 и т.д.
		и в базе данных 4 будут записываться это самое значени unique_id и 1 по умолчанию, так как человек посетил страницу 1 раз, а также ref, то есть кто привлёк
		Если же на сервер будет посылаться это:
		{
		  new: false,
		  unique_id: 1,
		  value: 1
		}, то к уже существующему значению в базе данных 4 будет добавлятся значение value, если значение с таким unique_id не найдено, то ответом будет ошибка {error: "Такого пользователя не найдено"},
		если всё успешно, то будет посылаться {success: true}


==> 4. Сбор и вывод данных:
	- На странице "/dashboard" будут отображаться данные
		1. Количество Посетителей сайта (месяц)
		2. Количество Посетителей ТГ (месяц)
		3. Количество Покупок сайта (месяц)
		4. Количество Покупок ТГ (месяц)
		5. Количество Посетителей сайта
		6. Количество Посетителей ТГ
		7. Количество Покупок сайта
		8. Количество Покупок ТГ
		9. Количество Заработанных рублей (месяц)
		10. Количество Заработанных рублей	
	- Будет отображаться также реферальная ссылка на ТГ и сайт чтобы её можно было скопировать


==> 5. Реферальная программа:
	- Как только человек заходит на сайт, ему сразу же присваевается уникальный идентфикатор, после отправки запроса к беку на /visitor, теперь,
	когда человек снова будет заходить на сайт, то добавлятся будет только количество заходов именно этого пользователя.


==> 6. 2 Типа реферальных ссылок:
	- Будет 2 типа реферальных ссылок, один будет подсчитывать сколько человек зашло или купило что-то от определенного человека, а другая будет подсчитывать кол-во самих действий.



